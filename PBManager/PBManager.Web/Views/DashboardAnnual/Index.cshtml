
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">




    <!-- Content Header (Page header) -->
    <section class="content-header">
        <h1>
            Dashboard annual
            <p><small>Explore your data by year</small></p>
        </h1>
    </section>

    <!-- Main content -->
    <section class="content">

        <!-- first row -->
        <div class="row">

            <div class="col-md-6">
                @Html.Partial("_DashboardMainForm")
            </div>
        </div> <!-- /first row -->
        <!-- second row -->
        <div class="row">
            <!-- col (LEFT) -->
            <div class="col-md-6">


                <!-- DONUT CHART -->
                <div class="box box-danger" style="display: none;" id="donutChartId">
                    <div class="box-header with-border">
                        <h3 class="box-title">Donut Chart</h3>
                        <div class="box-tools pull-right">
                        </div>
                    </div>
                    <div class="box-body pieChartClass" id="pieChartClassId">
                    </div><!-- /.box-body -->
                </div><!-- /.box -->


                <div class="box box-danger" style="display: none;" id="progressBarId">
                    <div class="box-header with-border">
                        <h3 class="box-title">Progress Bars</h3>
                        <div class="box-tools pull-right">
                        </div>
                    </div>
                    <div class="box-body classProgressBars">
                        <div class="divProgressBars">
                        </div><!-- /.box-body -->
                    </div><!-- /.box -->
                </div><!-- /.col (LEFT) -->


                <div class="box box-info" style="display: none;" id="lineChartId">
                    <div class="box-header with-border">
                        <h3 class="box-title">Line Chart</h3>
                        <div class="box-tools pull-right">
                        </div>
                    </div>
                    <div class="box-body classExpensesLineChart">
                        <canvas id="canvasExpensesLineChart" style="height:250px"></canvas>
                    </div>
                </div>
                <!-- /.box-body -->
            </div>



            <!-- col (RIGHT) -->
            <div class="col-md-6">

            </div><!-- /.col (RIGHT) -->



        </div><!-- /.row -->


    </section><!-- /.content -->


</div><!-- /.content-wrapper -->



<script src="~/Content/js/plugins/jquery/jquery-3.3.1.js"></script>
<script src="~/Content/bower_components/chart.js/Chart.js"></script>
@Scripts.Render("~/bundles/jqueryval")

<script>
    function BuildPieGraphic(data) {

        $("#pieChartClassId").append(" <div class='divPieChart'><div id='pieChartLegendDiv'></div><canvas id='pieChart' style='height: 250px'></canvas></div>");


        if (data.length > 0) {
            $("#donutChartId").get(0).style.display = "block";

            var pieChartCanvas = $("#pieChart").get(0).getContext("2d");
            var pieData = [
                {

                }
            ];

            var pieOptions = {
                //Boolean - Whether we should show a stroke on each segment
                segmentShowStroke: true,
                //String - The colour of each segment stroke
                segmentStrokeColor: "#fff",
                //Number - The width of each segment stroke
                segmentStrokeWidth: 2,
                //Number - The percentage of the chart that we cut out of the middle
                percentageInnerCutout: 0, // This is 0 for Pie charts
                //Number - Amount of animation steps
                animationSteps: 100,
                //String - Animation easing effect
                animationEasing: "easeOutBounce",
                //Boolean - Whether we animate the rotation of the Doughnut
                animateRotate: true,
                //Boolean - Whether we animate scaling the Doughnut from the centre
                animateScale: false,
                //Boolean - whether to make the chart responsive to window resizing
                responsive: true,
                // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                maintainAspectRatio: true,
                //String - A legend template
                legendTemplate: "<br><ul class=\"<%=name.toLowerCase()%>-legend\"><% var total = segments.reduce(function(previousValue, currentValue){ return previousValue + currentValue.value;},0); for (var i=0; i<segments.length; i++){%><li style=\"display:inline\"><span style=\"background-color:<%=segments[i].fillColor%>\">&nbsp&nbsp&nbsp</span><%if(segments[i].label){%><%=segments[i].label%>: <%=Math.floor((segments[i].value/total)*100)%>%<%}%>&nbsp &nbsp &nbsp</li><%}%></ul>",

                tooltipTemplate: "<%if (label){%><%=label%>: <%}%><%= value %> [%]"
            };

            var index = 0;
            while (index < data.length) {
                var newCategory = {};
                newCategory['value'] = data[index].categorySum;
                newCategory['color'] = data[index].categoryColor;
                newCategory['highlight'] = data[index].categoryColor;
                newCategory['label'] = data[index].categoryName;
                pieData[index] = newCategory;
                index++;

            }

            var pieChart = new Chart(pieChartCanvas).Pie(pieData, pieOptions);
            document.getElementById("pieChartLegendDiv").innerHTML = pieChart.generateLegend();
        }
    }


    function BuildLineGraphic(data) {
        if (data.data.length > 0) {

            $("#lineChartId").get(0).style.display = "block";

            var lineChartCanvas = $('#canvasExpensesLineChart').get(0).getContext('2d');
            var lineChartData = {
                labels: data.labels,
                datasets:
                    [
                        {
                            label: 'expenses',
                            fillColor: 'rgba(210, 214, 222, 1)',
                            strokeColor: 'rgba(210, 214, 222, 1)',
                            pointColor: 'rgba(210, 214, 222, 1)',
                            pointStrokeColor: '#c1c7d1',
                            pointHighlightFill: '#fff',
                            pointHighlightStroke: 'rgba(220,220,220,1)',
                            data: data.data
                        }
                    ]
            }
            var lineChartOptions = {
                //Boolean - If we should show the scale at all
                showScale: true,
                //Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: true,
                //String - Colour of the grid lines
                scaleGridLineColor: 'rgba(0,0,0,.05)',
                //Number - Width of the grid lines
                scaleGridLineWidth: 1,
                //Boolean - Whether to show horizontal lines (except X axis)
                scaleShowHorizontalLines: true,
                //Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,
                //Boolean - Whether the line is curved between points
                bezierCurve: true,
                //Number - Tension of the bezier curve between points
                bezierCurveTension: 0.3,
                //Boolean - Whether to show a dot for each point
                pointDot: 3,
                //Number - Radius of each point dot in pixels
                pointDotRadius: 4,
                //Number - Pixel width of point dot stroke
                pointDotStrokeWidth: 1,
                //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
                pointHitDetectionRadius: 20,
                //Boolean - Whether to show a stroke for datasets
                datasetStroke: true,
                //Number - Pixel width of dataset stroke
                datasetStrokeWidth: 2,
                //Boolean - Whether to fill the dataset with a color
                datasetFill: true,
                //String - A legend template
                legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].lineColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>',
                //Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                maintainAspectRatio: true,
                //Boolean - whether to make the chart responsive to window resizing
                responsive: true
            }
            lineChartOptions.datasetFill = false;

            var lineChart = new Chart(lineChartCanvas).Line(lineChartData, lineChartOptions);
        }

    };


    function GetProgressBarsData() {
        var year = $("#yearDropDown").val();
    };


    var BuildBudgetProgressBar = function (data, index, sumOfValues) {

        $("#progressBarId").get(0).style.display = "block";

        var width = (data[index].categorySum / sumOfValues) * 100;
        var valueNow = data[index].categorySum;
        var valueMin = 0;
        var valueMax = sumOfValues;
        var bgProgressBar = ["bg-primary", "bg-secondary", "bg-success", "bg-danger", "bg-warning"];
        var div = "<div class='progress-group'> <span class='progress-text'>" + data[index].categoryName + ": " + valueNow.toFixed(2) + "</span> <div class='progress'> <div class='progress-bar' style='width:" + width + "%;background-color:" + data[index].categoryColor + "' aria-valuenow=" + valueNow.toFixed(2) + " aria-valuemin=" + valueMin + " aria-valuemax=" + valueMax + ">"  + "</div></div></div>";

        return div;
    }


    $(document).ready(function() {

        $("#btnSubmit").click(function() {

            $("#donutChartId").get(0).style.display = "none";
            $("#progressBarId").get(0).style.display = "none";
            $("#lineChartId").get(0).style.display = "none";
        });
    });



    var BuildBarChart = function (data) {

        var valueNow = data[0].listOfValues;
        var valueArr = [];
        valueArr.push(valueNow);


        var barChartCanvas = $("#barChart").get(0).getContext("2d");
        var barChart = new Chart(barChartCanvas);
        var barChartData = {
            labels: ["2020"],
            datasets: [
                {
                    label: "2020 data",
                    fillColor: "rgba(210, 214, 222, 1)",
                    strokeColor: "rgba(210, 214, 222, 1)",
                    pointColor: "rgba(210, 214, 222, 1)",
                    pointStrokeColor: "#c1c7d1",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba(220,220,220,1)",
                    data: valueArr
                }
            ]
        };

        var barChartOptions = {
            //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
            scaleBeginAtZero: true,
            //Boolean - Whether grid lines are shown across the chart
            scaleShowGridLines: true,
            //String - Colour of the grid lines
            scaleGridLineColor: "rgba(0,0,0,.05)",
            //Number - Width of the grid lines
            scaleGridLineWidth: 1,
            //Boolean - Whether to show horizontal lines (except X axis)
            scaleShowHorizontalLines: true,
            //Boolean - Whether to show vertical lines (except Y axis)
            scaleShowVerticalLines: true,
            //Boolean - If there is a stroke on each bar
            barShowStroke: true,
            //Number - Pixel width of the bar stroke
            barStrokeWidth: 2,
            //Number - Spacing between each of the X value sets
            barValueSpacing: 5,
            //Number - Spacing between data sets within X values
            barDatasetSpacing: 1,
            //String - A legend template
            legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].fillColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
            //Boolean - whether to make the chart responsive
            responsive: true,
            maintainAspectRatio: true
        };

        barChartOptions.datasetFill = false;
        barChart.Bar(barChartData, barChartOptions);

    }


</script>