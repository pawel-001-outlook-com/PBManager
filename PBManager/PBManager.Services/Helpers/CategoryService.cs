using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PBManager.Core.Models;
using PBManager.DAL.Repositories;


namespace PBManager.Services.Helpers
{
    class CategoryService
    {
        private CategoryRepository _repository = new CategoryRepository();
        private SubcategoryService _subcategoryService = new SubcategoryService();

        public IEnumerable<Category> GetAll()
        {
            return _repository.GetCategories();
        }


        public void Add(Category category)
        {
            category.Enabled = true;
            category.CanEdit = true;

            var nameExists = _repository.GetCategoryByName(category.Name, category.Type) != null;

            if (!nameExists)

                _repository.Insert(category);
            else
                throw new Exception($"Already exists a category with name {category.Name}");
        }

        public void Update(Category category)
        {
            var currentCategory = GetById(category.Id);

            if (currentCategory.CanEdit)
            {
                var quantity = (_repository.GetCategoriesByName(category.Name)).Count(c => !c.Id.Equals(currentCategory.Id));

                category.Enabled = true;
                category.CanEdit = currentCategory.CanEdit;

                if (quantity.Equals(0))
                    _repository.Update(category);
                else
                    throw new Exception($"Already exists a {category.Type} category with name {category.Name}");
            }
            else
            {
                throw new Exception("This category was generated by other routine and cannot be changed");
            }
        }

        public Category GetById(int id)
        {
            var category = _repository.GetCategoryById(id);

            if (category != null)
                return category;
            else
                throw new Exception("This category not exists");
        }

        public Category GetByName(string name, string type)
        {
            var category = _repository.GetCategoryByName(name, type);

            if (category != null)
                return category;
            else
                throw new Exception("This category not exists");
        }

        public double CategoryBalance(IEnumerable<Cashflow> cashflows)
        {
            return cashflows.Sum(cf => cf.Value);
        }
    }
}
