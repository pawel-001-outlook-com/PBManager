using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PBManager.Core.Models;
using PBManager.DAL.Repositories;

namespace PBManager.Services.Helpers
{
    class SubcategoryService
    {
        private SubcategoryRepository _repository = new SubcategoryRepository();

        public IEnumerable<Subcategory> GetAll()
        {
            return _repository.GetSubcategories();
        }

        public Subcategory GetById(int id)
        {
            var subcategory = _repository.GetSubcategoryById(id);

            if (subcategory != null)
                return subcategory;
            else
                throw new Exception("This subcategory not exist");
        }

        public void Add(Subcategory subcategory)
        {
            var nameExists = (_repository.GetSubcategoryByName(subcategory.Name, subcategory.CategoryId)) != null;

            if (!nameExists)
                _repository.Insert(subcategory);
            else
                throw new Exception($"Already exists a subcategory {subcategory.Name} in this category");
        }

        public async Task Update(Subcategory subcategory)
        {
            var currentSubcategory = GetById(subcategory.Id);

            if (true)
            {
                var quantity = (_repository.GetSubcategoriesByName(subcategory.Name, subcategory.CategoryId))
                    .Count(s => !s.Id.Equals(currentSubcategory.Id));

                if (quantity.Equals(0))
                    _repository.Update(subcategory);
                else
                    throw new Exception($"Already exists a subcategory {subcategory.Name} in this category");
            }
            else
            {
                throw new Exception("This subcategory was generated by other routine and cannot be changed");
            }
        }

        public void Delete(int id)
        {
            var subcategory = GetById(id);

            if (subcategory.CanEdit)
            {
                subcategory.Enabled = false;
                _repository.Update(subcategory);
            }
            else
            {
                throw new Exception("This subcategory was generated by other routine and cannot be changed");
            }
        }

        public void Delete(ICollection<Subcategory> subcategories)
        {
            Func<Subcategory, Subcategory> disableSubcategoryAction = (s) => { s.Enabled = false; return s; };
            subcategories = subcategories.Select(disableSubcategoryAction).ToList();

            _repository.Update(subcategories);
        }
    }
}
